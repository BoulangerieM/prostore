{"version":3,"file":"common.js","mappings":"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","sources":["./src/app/models/monthWording.ts","./src/app/shared/utils/orderListToOrderProductList.ts","./node_modules/date-fns/esm/getDaysInMonth/index.js","./node_modules/date-fns/esm/getMonth/index.js","./node_modules/date-fns/esm/setMonth/index.js","./node_modules/date-fns/esm/set/index.js"],"sourcesContent":["export const MonthWording = [\r\n    \"janvier\",\r\n    \"février\",\r\n    \"mars\",\r\n    \"avril\",\r\n    \"mai\",\r\n    \"juin\",\r\n    \"juillet\",\r\n    \"août\",\r\n    \"septembre\",\r\n    \"octobre\",\r\n    \"novembre\",\r\n    \"decembre\"\r\n];","import { Order, OrderProduct } from '@models/order';\r\n\r\nexport function mapOrderListToOrderProductList(ordersList: Order[]): OrderProduct[] {\r\n    let tmpOrderArray: OrderProduct[] = [];\r\n    const finalArray: OrderProduct[] = [];\r\n    ordersList.forEach((order) => {\r\n        tmpOrderArray = [...tmpOrderArray, ...order.order];\r\n    });\r\n    tmpOrderArray.forEach((product) => {\r\n        const oneProductArray = tmpOrderArray.filter(\r\n            (el) => el.product === product.product\r\n        );\r\n        oneProductArray.forEach((uniqueProductOrder) => {\r\n            if (uniqueProductOrder.comment) {\r\n                finalArray.push(uniqueProductOrder);\r\n            } else if (uniqueProductOrder.isSliced) {\r\n                const indexFinalArraySlicedProduct = finalArray.findIndex(\r\n                    (el) =>\r\n                        el.product === uniqueProductOrder.product &&\r\n                        !el.comment &&\r\n                        el.isSliced\r\n                );\r\n                if (indexFinalArraySlicedProduct >= 0) {\r\n                    finalArray[indexFinalArraySlicedProduct].quantity +=\r\n                        uniqueProductOrder.quantity;\r\n                } else {\r\n                    finalArray.push(uniqueProductOrder);\r\n                }\r\n            } else {\r\n                const indexFinalArrayProduct = finalArray.findIndex(\r\n                    (el) =>\r\n                        el.product === uniqueProductOrder.product &&\r\n                        !el.comment &&\r\n                        !el.isSliced\r\n                );\r\n                if (indexFinalArrayProduct >= 0) {\r\n                    finalArray[indexFinalArrayProduct].quantity +=\r\n                        uniqueProductOrder.quantity;\r\n                } else {\r\n                    finalArray.push(uniqueProductOrder);\r\n                }\r\n            }\r\n        });\r\n        tmpOrderArray = tmpOrderArray.filter(\r\n            (el) => el.product !== product.product\r\n        );\r\n    });\r\n\r\n    finalArray.forEach(product => product.quantity = +product.quantity.toFixed(2))\r\n    return finalArray.sort((a, b) =>\r\n        a.product < b.product ? -1 : a.product > b.product ? 1 : 0\r\n    );\r\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getDaysInMonth\n * @category Month Helpers\n * @summary Get the number of days in a month of the given date.\n *\n * @description\n * Get the number of days in a month of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the number of days in a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // How many days are in February 2000?\n * const result = getDaysInMonth(new Date(2000, 1))\n * //=> 29\n */\n\nexport default function getDaysInMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  var monthIndex = date.getMonth();\n  var lastDayOfMonth = new Date(0);\n  lastDayOfMonth.setFullYear(year, monthIndex + 1, 0);\n  lastDayOfMonth.setHours(0, 0, 0, 0);\n  return lastDayOfMonth.getDate();\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getMonth\n * @category Month Helpers\n * @summary Get the month of the given date.\n *\n * @description\n * Get the month of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which month is 29 February 2012?\n * const result = getMonth(new Date(2012, 1, 29))\n * //=> 1\n */\n\nexport default function getMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var month = date.getMonth();\n  return month;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport getDaysInMonth from \"../getDaysInMonth/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name setMonth\n * @category Month Helpers\n * @summary Set the month to the given date.\n *\n * @description\n * Set the month to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} month - the month of the new date\n * @returns {Date} the new date with the month set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set February to 1 September 2014:\n * const result = setMonth(new Date(2014, 8, 1), 1)\n * //=> Sat Feb 01 2014 00:00:00\n */\n\nexport default function setMonth(dirtyDate, dirtyMonth) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var month = toInteger(dirtyMonth);\n  var year = date.getFullYear();\n  var day = date.getDate();\n  var dateWithDesiredMonth = new Date(0);\n  dateWithDesiredMonth.setFullYear(year, month, 15);\n  dateWithDesiredMonth.setHours(0, 0, 0, 0);\n  var daysInMonth = getDaysInMonth(dateWithDesiredMonth); // Set the last day of the new month\n  // if the original date was the last day of the longer month\n\n  date.setMonth(month, Math.min(day, daysInMonth));\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport setMonth from \"../setMonth/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n\n/**\n * @name set\n * @category Common Helpers\n * @summary Set date values to a given date.\n *\n * @description\n * Set date values to a given date.\n *\n * Sets time values to date from object `values`.\n * A value is not set if it is undefined or null or doesn't exist in `values`.\n *\n * Note about bundle size: `set` does not internally use `setX` functions from date-fns but instead opts\n * to use native `Date#setX` methods. If you use this function, you may not want to include the\n * other `setX` functions that date-fns provides if you are concerned about the bundle size.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Object} values - an object with options\n * @param {Number} [values.year] - the number of years to be set\n * @param {Number} [values.month] - the number of months to be set\n * @param {Number} [values.date] - the number of days to be set\n * @param {Number} [values.hours] - the number of hours to be set\n * @param {Number} [values.minutes] - the number of minutes to be set\n * @param {Number} [values.seconds] - the number of seconds to be set\n * @param {Number} [values.milliseconds] - the number of milliseconds to be set\n * @returns {Date} the new date with options set\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `values` must be an object\n *\n * @example\n * // Transform 1 September 2014 into 20 October 2015 in a single line:\n * var result = set(new Date(2014, 8, 20), { year: 2015, month: 9, date: 20 })\n * //=> Tue Oct 20 2015 00:00:00\n *\n * @example\n * // Set 12 PM to 1 September 2014 01:23:45 to 1 September 2014 12:00:00:\n * var result = set(new Date(2014, 8, 1, 1, 23, 45), { hours: 12 })\n * //=> Mon Sep 01 2014 12:23:45\n */\nexport default function set(dirtyDate, values) {\n  requiredArgs(2, arguments);\n\n  if (typeof values !== 'object' || values === null) {\n    throw new RangeError('values parameter must be an object');\n  }\n\n  var date = toDate(dirtyDate); // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date\n\n  if (isNaN(date.getTime())) {\n    return new Date(NaN);\n  }\n\n  if (values.year != null) {\n    date.setFullYear(values.year);\n  }\n\n  if (values.month != null) {\n    date = setMonth(date, values.month);\n  }\n\n  if (values.date != null) {\n    date.setDate(toInteger(values.date));\n  }\n\n  if (values.hours != null) {\n    date.setHours(toInteger(values.hours));\n  }\n\n  if (values.minutes != null) {\n    date.setMinutes(toInteger(values.minutes));\n  }\n\n  if (values.seconds != null) {\n    date.setSeconds(toInteger(values.seconds));\n  }\n\n  if (values.milliseconds != null) {\n    date.setMilliseconds(toInteger(values.milliseconds));\n  }\n\n  return date;\n}"],"names":[],"sourceRoot":"webpack:///"}